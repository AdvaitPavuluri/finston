from vex import *
import math

brain = Brain()
controller_1 = Controller(PRIMARY)

wait(30, MSEC)

'''
Front

1  2

Back
'''

brain.screen.print("running advait's code :)\n")

# This Drivetrain code is entirely generated by VEXcode V5
left_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)
right_drive_smart = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)
drivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1) 

# define variables used for controlling motors based on controller inputs
drivetrain_needs_to_be_stopped_controller_1 = False

brain.screen.print("Assuming two motor drive.\n")

# define a task that will handle monitoring inputs from controller_1
def rc_auto_loop_function_controller_1():
    global drivetrain_needs_to_be_stopped_controller_1, remote_control_code_enabled
    # process the controller input every 20 milliseconds
    # update the motors based on the input values
    while True:
        if remote_control_code_enabled:
            
            # calculate the drivetrain motor velocities from the controller joystick axies
            # left = axis3 + axis4
            # right = axis3 - axis4
            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()
            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()
            
            # check if the values are inside of the deadband range
            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:
                # check if the motors have already been stopped
                if drivetrain_needs_to_be_stopped_controller_1:
                    # stop the drive motors
                    left_drive_smart.stop()
                    right_drive_smart.stop()
                    # tell the code that the motors have been stopped
                    drivetrain_needs_to_be_stopped_controller_1 = False
            else:
                # reset the toggle so that the deadband code knows to stop the motors next
                # time the input is in the deadband range
                drivetrain_needs_to_be_stopped_controller_1 = True
            
            # only tell the left drive motor to spin if the values are not in the deadband range
            if drivetrain_needs_to_be_stopped_controller_1:
                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)
                left_drive_smart.spin(FORWARD)
            # only tell the right drive motor to spin if the values are not in the deadband range
            if drivetrain_needs_to_be_stopped_controller_1:
                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)
                right_drive_smart.spin(FORWARD)
        # wait before repeating the process
        wait(20, MSEC)

# define variable for remote controller enable/disable
remote_control_code_enabled = True

brain.screen.print("Using generated V5 code.\n")

rc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)

brain.screen.print("Running thread rc_auto_loop_thread_controller_1.\n")
brain.screen.print("is everything working? :o")
